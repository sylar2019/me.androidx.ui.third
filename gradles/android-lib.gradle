apply from: gradlesPath + 'utils.gradle'
apply from: gradlesPath + 'maven.gradle'
if (isAndroidApp()) {
    apply plugin: "com.android.application"

} else if (isAndroid()) {
    apply plugin: "com.android.library"
}

/** ******************************************************************************************/

/** ******************************************************************************************/

android {
    compileSdkVersion Integer.valueOf("${androidCompileSdkVersion}")
    buildToolsVersion "${androidBuildToolsVersion}"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion Integer.valueOf("${androidMinSdkVersion}")
        targetSdkVersion Integer.valueOf("${androidTargetSdkVersion}")

        versionCode 100
        versionName "1.0.0"
        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            ldLibs "logFile", "z", "m"
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86-64"
        }

    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            //是否对代码进行混淆
            minifyEnabled false
            //指定混淆的规则文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        //即使报错也不会停止打包
        abortOnError false
        //打包release版本的时候进行检测
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    api "androidx.appcompat:appcompat:${androidxAppcompatVersion}"
    api "com.android.support:appcompat-v7:${androidAppcompatV7Version}"


    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation 'org.mockito:mockito-core:3.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0')
}

/** ******************************************************************************************/

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}
artifacts {
    archives androidSourcesJar
}

/** ******************************************************************************************/

